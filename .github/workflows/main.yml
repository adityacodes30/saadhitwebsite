name: Deployr CI/CD
on:
  push:
    branches: [ main ]
  workflow_dispatch:
env:
  DEPLOY_DOMAIN: https://saadhit.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        id: build
        run: |
          if npm run build; then
            echo "Build successful"
          else
            echo "Build failed"
            exit 1
          fi

      - name: Generate signature and trigger deployment
        id: trigger
        if: success()
        run: |
          MESSAGE="deployr"  # This message must match the expected message in Go code
  
          PRIVATE_KEY="${{ secrets.DEPLOYR_PRIVKEY }}"
          SIGNATURE=$(echo -n "$MESSAGE" | openssl dgst -sha256 -sign <(echo "$PRIVATE_KEY") -binary | base64)
          
          PAYLOAD=$(jq -n --arg message "$MESSAGE" --arg signature "$SIGNATURE" \
            '{message: $message, signature: $signature}')
          
          RESPONSE=$(curl -s -X POST "${{ env.DEPLOY_DOMAIN }}/deployr/deploy" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          echo "Raw response: $RESPONSE"
          
          if [ -z "$RESPONSE" ]; then
            echo "Failed to get job ID"
            exit 1
          fi
          echo "Successfully received job ID: $RESPONSE"
          
          MAX_ATTEMPTS=100  # 5 minutes (100 * 3 seconds)
          attempt=1
          
          # Poll for job status
          while [ $attempt -le $MAX_ATTEMPTS ]; do
            STATUS_URL="${{ env.DEPLOY_DOMAIN }}/deployr/status?job_id=$RESPONSE"
            echo "Checking status at: $STATUS_URL"
            
            STATUS=$(curl -s -f "$STATUS_URL" || echo "error")
            echo "Attempt $attempt: Status is $STATUS"
            
            if [ "$STATUS" = "completed" ]; then
              echo "Deployment completed successfully!"
              exit 0
            elif [ "$STATUS" = "failed" ]; then
              echo "Deployment failed!"
              exit 1
            elif [ "$STATUS" = "error" ]; then
              echo "Error fetching status"
              exit 1
            fi
            
            if [ "$STATUS" != "running" ]; then
              echo "Unexpected status: $STATUS"
            fi
            
            attempt=$((attempt + 1))
            sleep 3
          done
          
          echo "Timeout: Deployment took too long"
          exit 1
